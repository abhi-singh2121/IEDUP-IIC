// server.js
require('dotenv').config();
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const path = require('path');
const basicAuth = require('express-basic-auth');
const { Parser } = require('json2csv');

const app = express();
const PORT = process.env.PORT || 3000;

/* ---------- Middleware ---------- */
app.use(cors()); // dev only; in prod restrict origin
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

/* ---------- MongoDB connect ---------- */
const MONGO_URI = process.env.MONGO_URI || 'mongodb://127.0.0.1:27017/incubationDB';
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('✅ MongoDB connected'))
  .catch(err => console.error('❌ MongoDB connect error:', err));

/* ---------- Schema ---------- */
const formSchema = new mongoose.Schema({
  formType: { type: String, trim: true }, // 'pre-incubation' or 'incubation'
  name: String,
  email: String,
  phone: String,
  startup_name: String,
  idea: String,
  stage: String,
  status: { type: String, default: 'new' }, // new / reviewed / accepted / rejected
  createdAt: { type: Date, default: Date.now },
});
const Form = mongoose.model('Form', formSchema);

/* ---------- Public static (frontend) ---------- */
app.use(express.static(path.join(__dirname, 'public')));

/* ---------- Public API: accept forms ---------- */
/* POST /api/form/pre-incubation  or /api/form/incubation */
app.post('/api/form/:type', async (req, res) => {
  try {
    const type = req.params.type;
    // basic validation
    const { name, email, phone, startup_name, idea, stage } = req.body;
    if (!name || !email || !idea) {
      return res.status(400).json({ success: false, message: 'Name, email and idea are required.' });
    }
    const doc = new Form({
      formType: type,
      name, email, phone, startup_name, idea, stage
    });
    await doc.save();
    return res.json({ success: true, message: 'Form submitted successfully.' });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ success: false, message: 'Server error', error: err.message });
  }
});

/* ---------- Admin protection ---------- */
const adminUser = process.env.ADMIN_USER || 'admin';
const adminPass = process.env.ADMIN_PASS || 'admin123';
const adminAuth = basicAuth({
  users: { [adminUser]: adminPass },
  challenge: true,
  realm: 'IEDIIC Admin'
});

/* ---------- Admin UI (protected) ---------- 
   Put your admin/index.html + admin.js inside ./admin folder
*/
app.use('/admin', adminAuth, express.static(path.join(__dirname, 'admin')));

/* ---------- Admin API endpoints (protected) ---------- */

/* GET /api/admin/forms
   Query params:
     - type (pre-incubation || incubation)
     - q (search string)
     - page, limit
     - export=csv  -> returns CSV file
*/
app.get('/api/admin/forms', adminAuth, async (req, res) => {
  try {
    let { type, q, page = 1, limit = 200, export: exportFlag } = req.query;
    page = Number(page) || 1;
    limit = Number(limit) || 200;

    const filter = {};
    if (type) filter.formType = type;
    if (q) {
      const rx = new RegExp(q, 'i');
      filter.$or = [{ name: rx }, { email: rx }, { startup_name: rx }, { idea: rx }];
    }

    const total = await Form.countDocuments(filter);
    const rows = await Form.find(filter)
      .sort({ createdAt: -1 })
      .skip((page - 1) * limit)
      .limit(limit)
      .lean();

    if (exportFlag === 'csv' || exportFlag === '1' || exportFlag === 'true') {
      const fields = ['_id', 'formType', 'name', 'email', 'phone', 'startup_name', 'stage', 'idea', 'status', 'createdAt'];
      const parser = new Parser({ fields });
      // convert createdAt to ISO string to make CSV readable
      const rowsForCsv = rows.map(r => {
        return { ...r, createdAt: r.createdAt ? r.createdAt.toISOString() : '' };
      });
      const csv = parser.parse(rowsForCsv);
      res.header('Content-Type', 'text/csv');
      res.attachment(`forms_export_${Date.now()}.csv`);
      return res.send(csv);
    }

    return res.json({ total, page, limit, rows });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ success: false, message: err.message });
  }
});

/* GET single form details (admin) */
app.get('/api/admin/forms/:id', adminAuth, async (req, res) => {
  try {
    const doc = await Form.findById(req.params.id).lean();
    if (!doc) return res.status(404).json({ success: false, message: 'Not found' });
    return res.json(doc);
  } catch (err) {
    console.error(err);
    return res.status(500).json({ success: false, message: err.message });
  }
});

/* Update status (admin) */
app.put('/api/admin/forms/:id/status', adminAuth, async (req, res) => {
  try {
    const { status } = req.body;
    await Form.findByIdAndUpdate(req.params.id, { status, updatedAt: new Date() });
    return res.json({ success: true });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ success: false, message: err.message });
  }
});

/* Delete (optional) */
app.delete('/api/admin/forms/:id', adminAuth, async (req, res) => {
  try {
    await Form.findByIdAndDelete(req.params.id);
    return res.json({ success: true });
  } catch (err) {
    console.error(err);
    return res.status(500).json({ success: false, message: err.message });
  }
});

/* ---------- Fallback to index.html for SPA behavior ---------- */
const fs = require("fs");

app.get("/*", (req, res) => {
  const indexPath = path.join(__dirname, "public", "index.html");

  if (fs.existsSync(indexPath)) {
    return res.sendFile(indexPath);
  }

  // If index.html not found, send 404 text
  return res.status(404).send("Not found");
});


/* ---------- Start ---------- */
app.listen(PORT, () => {
  console.log(`🚀 Server running at http://localhost:${PORT}`);
  console.log(`🔒 Admin UI at http://localhost:${PORT}/admin (protected)`);
});
